# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  slug: String
  content: String
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  content: String
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  content: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Banner {
  id: ID!
  image: CloudinaryImage_File
  url: String
  createdAt: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input BannerWhereUniqueInput {
  id: ID
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
}

input BannerOrderByInput {
  id: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
}

input BannerUpdateInput {
  image: Upload
  url: String
  createdAt: DateTime
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  image: Upload
  url: String
  createdAt: DateTime
}

type Product {
  id: ID!
  name: String
  total: Int
  description: Product_description_Document
  price: Int
  type: ProductType
  thumbnail: CloudinaryImage_File
  images(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  imagesCount(where: ProductImageWhereInput! = {}): Int
  createdAt: DateTime
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  total: IntFilter
  price: IntFilter
  type: ProductTypeWhereInput
  images: ProductImageManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  total: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  total: Int
  description: JSON
  price: Int
  type: ProductTypeRelateToOneForUpdateInput
  thumbnail: Upload
  images: ProductImageRelateToManyForUpdateInput
  createdAt: DateTime
}

input ProductTypeRelateToOneForUpdateInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
  disconnect: Boolean
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  total: Int
  description: JSON
  price: Int
  type: ProductTypeRelateToOneForCreateInput
  thumbnail: Upload
  images: ProductImageRelateToManyForCreateInput
  createdAt: DateTime
}

input ProductTypeRelateToOneForCreateInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

type ProductType {
  id: ID!
  name: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
}

input ProductTypeWhereUniqueInput {
  id: ID
}

input ProductTypeWhereInput {
  AND: [ProductTypeWhereInput!]
  OR: [ProductTypeWhereInput!]
  NOT: [ProductTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input ProductTypeUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductTypeUpdateArgs {
  where: ProductTypeWhereUniqueInput!
  data: ProductTypeUpdateInput!
}

input ProductTypeCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  product: Product
  createdAt: DateTime
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  createdAt: DateTimeNullableFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  product: ProductRelateToOneForUpdateInput
  createdAt: DateTime
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  product: ProductRelateToOneForCreateInput
  createdAt: DateTime
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductType(data: ProductTypeCreateInput!): ProductType
  createProductTypes(data: [ProductTypeCreateInput!]!): [ProductType]
  updateProductType(
    where: ProductTypeWhereUniqueInput!
    data: ProductTypeUpdateInput!
  ): ProductType
  updateProductTypes(data: [ProductTypeUpdateArgs!]!): [ProductType]
  deleteProductType(where: ProductTypeWhereUniqueInput!): ProductType
  deleteProductTypes(where: [ProductTypeWhereUniqueInput!]!): [ProductType]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  banners(
    where: BannerWhereInput! = {}
    orderBy: [BannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productTypes(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productType(where: ProductTypeWhereUniqueInput!): ProductType
  productTypesCount(where: ProductTypeWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
